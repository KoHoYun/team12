import java.awt.*;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowListener;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;

import javafx.geometry.Orientation;


public class Mainwindow extends JFrame{
	
	public Mainwindow() {
		
		super();
		
		Dimension dim = new Dimension(1200,800);
		
		JFrame window = new JFrame("SimpleMerge"); //window라는 frame 생성
		window.setVisible(true);
		window.setBounds(120,120,1200,800);
		window.setPreferredSize(dim);
		
		JPanel view = new JPanel(); 			//부모 패널

        view.setLayout(new GridLayout(2,3));
		
		FileDialog load = new FileDialog(this,"파일 열기",FileDialog.LOAD);
		FileDialog save = new FileDialog(this, "파일 저장", FileDialog.SAVE);
		
			
		JButton loadBtn1 = new JButton("LOAD");
		JButton editBtn1 = new JButton("EDIT");
		JButton saveBtn1 = new JButton("SAVE");
		
		JButton loadBtn2 = new JButton("LOAD");
		JButton editBtn2 = new JButton("EDIT");
		JButton saveBtn2 = new JButton("SAVE");
		
		JButton compareBtn = new JButton("COMPARE");
		
		JButton mergeBtn1 = new JButton("<<<LEFTMERGE");
		JButton mergeBtn2 = new JButton("RIGHTMERGE>>>");	

		JPanel panel1 = new JPanel(); 				// panel1을 frame에 추가 left 파일을 load, edit, save 하는 버튼 생성
		panel1.setLayout(new FlowLayout());
		panel1.add(loadBtn1);
		panel1.add(editBtn1);
		panel1.add(saveBtn1);
		
		JPanel panel2 = new JPanel();				 // panel2를 frame에 추가. 두 파일을 compare 하는 버튼 생성
		panel2.add(compareBtn);
		
		JPanel panel3 = new JPanel();			// panel3을 frame에 추가 right 파일을 load, edit, save 하는 버튼 생성
		panel3.setLayout(new FlowLayout());
		panel3.add(loadBtn2);
		panel3.add(editBtn2);
		panel3.add(saveBtn2);
		
		JTextArea leftcode = new JTextArea();			// panel4를 frame에 추가 left 파일의 text
		leftcode.append("LEFT FILE CODE \n");
		leftcode.setCaretPosition(leftcode.getText().length());
		leftcode.setLineWrap(true);
		leftcode.setWrapStyleWord(true);
		JScrollPane panel4 = new JScrollPane(leftcode);		
				
		JPanel panel5 = new JPanel();				// panel5를 frame에 추가. 두 파일을 merge 하는 버튼 생성
		panel5.add(mergeBtn1);
		panel5.add(mergeBtn2);
		
		JTextArea rightcode = new JTextArea();			// panel6를 frame에 추가 right 파일의 text
		rightcode.append("RIGHT FILE CODE \n");
		rightcode.setCaretPosition(rightcode.getText().length());
		rightcode.setLineWrap(true);
		rightcode.setWrapStyleWord(true);
		JScrollPane panel6 = new JScrollPane(rightcode);
		
		
		
		
		loadBtn1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// 파일 load하는 클래스로 객체 생성
				
				load.setVisible(true);
				System.out.println("선택폴더 : " + load.getDirectory());
				System.out.println("선택파일 : " + load.getFile());
				

				// 'txt 파일만 읽어와서' panel4의  textarea 에 출력!
				
				/*
				 try {
					    //dfName의 파일을 찾아가서 버퍼에 넣음
					    BufferedReader reader = new BufferedReader(new FileReader(lfName));
					    
					    //TextArea 초기화
					    txtMemo.setText("");
					    String line;
					    
					    //reader에 있는 파일을 readLine으로 한줄한줄 읽어옴
					    //TextArea에 한줄한줄 출력하고
					    //자료가 없으면 종료
					    while((line = reader.readLine()) != null) {     // 읽어온 문서의 줄이 없어지면
					     leftcode.append(line + "\n");       // leftcode에 추가
					    }
					    reader.close();
					    
					    //열은 파일의 파일명을 제모시줄에 표시
					    setTitle(dialog.getFile() + " - 메모장" );
				
				
				*/
				
				
			}
		});
		
		
		editBtn1.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				//파일 edit할 수 있게
				
				String lefttxt = leftcode.getText();
				
				update(lefttxt);
								
			}
			
			private void update(String code) {
				
			}
		});
		
		
		saveBtn1.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				//파일 save 할 수 있게
				save.setDirectory(".");  // .은 현재 저 파일이 위치하는 폴더
				save.setVisible(true);
				
				/*
				//현재경로를 기본으로 출력
				   save.setDirectory(".");
				   save.setVisible(true);
				   
				   //취소를 누르면 빠져나옴
				   // 이걸빼면 취소를 해도 저장이됨
				   if(dialog.getFile() == null) return;
				   
				   //파일저장 창의 선택한 경로와 파일네임을 dfName에 저장
				   String dfName = dialog.getDirectory() + dialog.getFile();  // 경로명 파일명
				   // System.out.println(dfName);
				   
				   
				   try {
				    //FileWriter에 경로명, 파일명을 집어넣음
				    BufferedWriter writer = new BufferedWriter(new FileWriter(dfName));
				    //버퍼라이터 객체를 통해 TextArea의 내용을 저장
				    writer.write(txtMemo.getText());
				    writer.close();
				    
				    setTitle(dialog.getFile() + " - 메모장" );
				   } catch (Exception e2) {
				    JOptionPane.showMessageDialog(this, "저장 오류");
				   }
				
				*/
				
				
				
			}
		});
		
		
		loadBtn2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// 파일 load하는 클래스로 객체 생성
				
				load.setVisible(true);
				System.out.println("선택폴더 : " + load.getDirectory());
				System.out.println("선택파일 : " + load.getFile());
				
				
				// txt 파일만 읽어와서 panel6의  textarea 에 출력!
				
				
				
			}
		});
		
		
		editBtn2.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				//파일 edit할 수 있게
				
				String lefttxt = leftcode.getText();
				
				update(lefttxt);
								
			}
			
			private void update(String code) {
				
			}
		});
		
		
		saveBtn2.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				//파일 save 할 수 있게
				
				save.setVisible(true);
			}
		});
		
		view.add(panel1);
		view.add(panel2);
		view.add(panel3);
		view.add(panel4);
		view.add(panel5);
		view.add(panel6);
		
		window.add(view);
		window.setVisible(true);

	}
	
	public void setVisible(boolean b) {
		// TODO Auto-generated method stub
		
	}

	public void setDefaultCloseOperation(int exitOnClose) {
		// TODO Auto-generated method stub
		
	}
	
	
	
}
